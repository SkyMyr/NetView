/* Generated By:JavaCC: Do not edit this line. cmmJavaCC.java */
package javacc;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.jena.*;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.DatatypeProperty;
import org.apache.jena.ontology.ObjectProperty;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFWriter;

public class cmmJavaCC implements cmmJavaCCConstants {
  public static void main(String args[])throws ParseException, FileNotFoundException, IOException{

    cmmJavaCC parser = new cmmJavaCC(new java.io.FileInputStream("D:\u005c\u005c1.txt"));
    outer:while (true){
      System.out.println("Please type the valid statement...");
      System.out.println("Enter an expression like");
      System.out.println("\u005c"int(real) a;\u005c" \u005c"a = 3;\u005c" \u005c"read(a);\u005c" \u005c"write(a);\u005c"");
      System.out.println("Using a \u005c"!\u005c" to terminate your input>>");
      try {
        switch (cmmJavaCC.Start()){
          case 0:System.out.println("OK.You have typed the correct statements.\u005cn");
          break ;
          case 1:System.out.println("Goodbye.Thank you for you testing!\u005cn");
          break outer;
          default :break ;
        }
      }
      catch (Exception e){
        System.out.println("Sorry! You have typed the invalid statements.\u005cn");
        System.out.println(e.getMessage());
        cmmJavaCC.ReInit(System.in);
      }
      catch (Error e){
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break ;
      }
    }
  }

  static final public int Start() throws ParseException, ParseException, FileNotFoundException, IOException {
    Procedure();
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

/*处理主程序*/
  static final public void Procedure() throws ParseException, ParseException, FileNotFoundException, IOException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      Block();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IP:
      case RULEORDER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

/*处理语句*/
  static final public void Statement() throws ParseException, ParseException, FileNotFoundException, IOException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IP:
      accesslistExtendedStatement();
      break;
    case RULEORDER:
      accesscontrol();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Block() throws ParseException, ParseException, FileNotFoundException, IOException {
    jj_consume_token(19);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IP:
      case RULEORDER:
        Statement();
        break;
      case 19:
        Block();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IP:
      case RULEORDER:
      case 19:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(20);
  }

/*处理访问控制列表声明语句*/
  static final public void accesslistExtendedStatement() throws ParseException, ParseException, FileNotFoundException, IOException {
    termIP();
    jj_consume_token(ACCESSLIST);
    jj_consume_token(EXTENDED);
    termACCESSLISTNAME();
  }

  static final public void termACCESSLISTNAME() throws ParseException, ParseException, FileNotFoundException, IOException {
        Token termALN;
    termALN = jj_consume_token(ACCESSLISTNAME);
                OntModel ontModel = ModelFactory.createOntologyModel();
                ontModel.read("D:\u005c\u005cACOntology.owl");
                String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#ACName");
                Individual acn=acnc.createIndividual(NS+termALN.image);
                DatatypeProperty obp=ontModel.getDatatypeProperty(NS+"nameIs");
                ontModel.add(acn,obp,termALN.image);
                FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                rdfWriter.write(ontModel, file, "RDF/XML");
                file.close();
                System.out.println(termALN.image);
  }

/*处理访问控制列表声明语句*/
  static final public void accesscontrol() throws ParseException, ParseException, FileNotFoundException, IOException {
        String ruleorder;
        String host1="agc", host2="bcd";String action="abc";
    ruleorder = termRULEORDER();
                           System.out.println("ruleorder is:"+ruleorder);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERMIT:
      jj_consume_token(PERMIT);
  action="permit";
      break;
    case DENY:
      jj_consume_token(DENY);
  action="deny";
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      host1 = termIPADDR();
      break;
    case ANY:
      host1 = termANY();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      host2 = termIPADDR();
      break;
    case ANY:
      host2 = termANY();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if(( !host1.equals("any"))&&( !host2.equals("any")))
      {
        System.out.println("host1 is:"+host1);System.out.println("host2 is:"+host2);
                OntModel ontModel = ModelFactory.createOntologyModel();
                ontModel.read("D:\u005c\u005cACOntology.owl");
                String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                Individual indi1 = ontModel.getIndividual(NS+"HOST"+host1);
                Individual indi2 = ontModel.getIndividual(NS+"HOST"+host2);
                Individual indi3 = ontModel.getIndividual(NS+"Rule"+ruleorder);
                Individual protocol = ontModel.getIndividual(NS+"IP");
                ObjectProperty obp1=ontModel.getObjectProperty(NS+"isSubjectOf");
                ObjectProperty obp2=ontModel.getObjectProperty(NS+"isObjectOf");
                ObjectProperty obp3=ontModel.getObjectProperty(NS+"isOperationOf");
                ontModel.add(indi1,obp1,indi3);
                ontModel.add(indi2,obp2,indi3);
                ontModel.add(protocol,obp3,indi3);
                if (action.equals("permit"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"PERMIT");
                  ontModel.add(permit1,obp4,indi3);
                }
                if (action.equals("deny"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"DENY");
                  ontModel.add(permit1,obp4,indi3);
                }

                FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                rdfWriter.write(ontModel, file, "RDF/XML");
                file.close();
                }

                if(( !host1.equals("any"))&&( host2.equals("any")))
        {
                OntModel ontModel = ModelFactory.createOntologyModel();
                        ontModel.read("D:\u005c\u005cACOntology.owl");
                        String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                        Individual indi1 = ontModel.getIndividual(NS+"HOST"+host1);
                        OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#UnconsideredEntities");
                        Individual indi2=acnc.createIndividual(NS+host1+"ToOthers");
                        Individual indi3 = ontModel.getIndividual(NS+"Rule"+ruleorder);
                        ObjectProperty obp1=ontModel.getObjectProperty(NS+"isSubjectOf");
                        ObjectProperty obp2=ontModel.getObjectProperty(NS+"isOperationOf");
                        ontModel.add(indi1,obp1,indi3);
                        ontModel.add(indi2,obp2,indi3);
                        Individual protocol = ontModel.getIndividual(NS+"IP");
                        ObjectProperty obp3=ontModel.getObjectProperty(NS+"isOperateOf");
                        ontModel.add(protocol,obp3,indi3);
                        if (action.equals("permit"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"PERMIT");
                  ontModel.add(permit1,obp4,indi3);
                }
                if (action.equals("deny"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"DENY");
                  ontModel.add(permit1,obp4,indi3);
                }

                        FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                        RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                        rdfWriter.write(ontModel, file, "RDF/XML");
                        file.close();
                System.out.println("host2 is:"+host2);
                }
                if(( host1.equals("any"))&&(! host2.equals("any")))
        {

                OntModel ontModel = ModelFactory.createOntologyModel();
                        ontModel.read("D:\u005c\u005cACOntology.owl");
                        String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                        OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#UnconsideredEntities");
                        Individual indi1=acnc.createIndividual(NS+"OthersTo"+host2);
                        Individual indi2 = ontModel.getIndividual(NS+"HOST"+host2);
                        Individual indi3 = ontModel.getIndividual(NS+"Rule"+ruleorder);
                        ObjectProperty obp1=ontModel.getObjectProperty(NS+"isSubjectOf");
                        ObjectProperty obp2=ontModel.getObjectProperty(NS+"isObjectOf");
                        ontModel.add(indi1,obp1,indi3);
                        ontModel.add(indi2,obp2,indi3);
                        Individual protocol = ontModel.getIndividual(NS+"IP");
                        ObjectProperty obp3=ontModel.getObjectProperty(NS+"isOperationOf");
                        ontModel.add(protocol,obp3,indi3);
                                if (action.equals("permit"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"PERMIT");
                  ontModel.add(permit1,obp4,indi3);
                }
                if (action.equals("deny"))
                {
                  ObjectProperty obp4=ontModel.getObjectProperty(NS+"isActionOf");
                  Individual permit1 = ontModel.getIndividual(NS+"DENY");
                  ontModel.add(permit1,obp4,indi3);
                }

                        FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                        RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                        rdfWriter.write(ontModel, file, "RDF/XML");
                        file.close();
                System.out.println("host2 is:"+host2);
                System.out.println("host1 is:"+host1);
                }
                if(( host1.equals("any"))&&( host2.equals("any")))
        {
                OntModel ontModel = ModelFactory.createOntologyModel();
                        ontModel.read("D:\u005c\u005cACOntology.owl");
                        String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";

                        OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#UnconsideredEntities");
                        Individual indi1=acnc.createIndividual(NS+"OthersTo"+host2);
                        Individual indi2=acnc.createIndividual(NS+host1+"ToOthers");
                        Individual indi3 = ontModel.getIndividual(NS+"Rule"+ruleorder);
                        ObjectProperty obp1=ontModel.getObjectProperty(NS+"isSubjectOf");
                        ObjectProperty obp2=ontModel.getObjectProperty(NS+"isObjectOf");
                        ontModel.add(indi1,obp1,indi3);
                        ontModel.add(indi2,obp2,indi3);
                        Individual protocol = ontModel.getIndividual(NS+"IP");
                        ObjectProperty obp3=ontModel.getObjectProperty(NS+"isOperationOf");
                        ontModel.add(protocol,obp3,indi3);
                        FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                        RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                        rdfWriter.write(ontModel, file, "RDF/XML");
                        file.close();
                System.out.println("host1 is:"+host1);
                System.out.println("host2 is:"+host2);
                }
  }

  static final public String termRULEORDER() throws ParseException, ParseException, FileNotFoundException, IOException {
  Token termRO;
    termRO = jj_consume_token(RULEORDER);
                OntModel ontModel = ModelFactory.createOntologyModel();
                ontModel.read("D:\u005c\u005cACOntology.owl");
                String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#Rule");
                Individual acn=acnc.createIndividual(NS+"Rule"+termRO.image);
                FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                rdfWriter.write(ontModel, file, "RDF/XML");
                file.close();
                System.out.println(termRO.image);
                {if (true) return termRO.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String termIP() throws ParseException {
  Token tIP;
    tIP = jj_consume_token(IP);
    System.out.println(tIP.image);
    {if (true) return tIP.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String termIPADDR() throws ParseException, ParseException, FileNotFoundException, IOException {
  Token t;
  String s1=new String("abc");
  String s2=new String("abc");
  String s3=new String("abc");
  String s4=new String("abc");
    t = jj_consume_token(IPADDR);
        int i=t.image.indexOf(".");
        s1=t.image.substring(0,i);
        System.out.println(s1);
        int j=t.image.indexOf(".",i+1);
        s2=t.image.substring(i+1,j);
        System.out.println(s2);
        int k=t.image.indexOf(".",j+1);
        s3=t.image.substring(j+1,k);
        System.out.println(s3);
        s4=t.image.substring(k+1,t.image.length());
        System.out.println(s4);

OntModel ontModel = ModelFactory.createOntologyModel();
                ontModel.read("D:\u005c\u005cACOntology.owl");
                String NS="http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#";
                OntClass acnc = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#IPAddOrMask");
                Individual acn=acnc.createIndividual(NS+"IP"+t.image);
                DatatypeProperty obp=ontModel.getDatatypeProperty(NS+"firstPartIs");
                ontModel.add(acn,obp,s1);
                DatatypeProperty obp2=ontModel.getDatatypeProperty(NS+"secondPartIs");
                ontModel.add(acn,obp2,s2);
                DatatypeProperty obp3=ontModel.getDatatypeProperty(NS+"thirdPartIs");
                ontModel.add(acn,obp3,s3);
                DatatypeProperty obp4=ontModel.getDatatypeProperty(NS+"fourthPartIs");
                ontModel.add(acn,obp4,s4);
                OntClass acnc2 = ontModel.getOntClass("http://www.semanticweb.org/lydia/ontologies/2018/3/untitled-ontology-36#Host");
                Individual acn2=acnc2.createIndividual(NS+"HOST"+t.image);
                ObjectProperty obp5=ontModel.getObjectProperty(NS+"isIpAddOf");
                ontModel.add(acn,obp5,acn2);
                FileOutputStream file = new FileOutputStream("D:\u005c\u005cACOntology.owl");
                RDFWriter rdfWriter= ontModel.getWriter("RDF/XML");
                rdfWriter.write(ontModel, file, "RDF/XML");
                file.close();
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String termANY() throws ParseException, ParseException, FileNotFoundException, IOException {
  Token t;
    t = jj_consume_token(ANY);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public cmmJavaCCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x40080,0x40080,0xc0080,0xc0080,0xc00,0x3000,0x3000,};
   }

  /** Constructor with InputStream. */
  public cmmJavaCC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public cmmJavaCC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new cmmJavaCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public cmmJavaCC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new cmmJavaCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public cmmJavaCC(cmmJavaCCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(cmmJavaCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
